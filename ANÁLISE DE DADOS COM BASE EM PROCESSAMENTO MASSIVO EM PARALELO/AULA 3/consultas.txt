SELECT * FROM PROJETOS

SELECT NOME, OBJETIVO  FROM PROJETO;

SELECT * FROM CARGO WHERE NIVEL = 'PLENO';

SELECT * FROM CARGO WHERE NOME LIKE '%ENGENHEIRO%';

SELECT * FROM CARGO WHERE NOME LIKE '%ENGENHEIRO%' AND NIVEL = 'JÚNIOR';

------JOIN-------------

----NOME DO CARGO DE CADA FUNCIONARIO----
SELECT FUNCIONARIO.NOME,CARGO.NOME, CARGO.NIVEL FROM FUNCIONARIO JOIN CARGO ON (FUNCIONARIO.CARGO = CARGO.CODIGO)

----NOME DO FUNCIONARIO E NOME DO PROJETO DE CADA PROJETO---------------
SELECT FUNCIONARIO.NOME AS NOME_FUNCIONARIO, PROJETO.NOME AS NOME_PROJETO, TIPO
FROM FUNCIONARIO JOIN FUNCIONARIO_PROJETO ON (FUNCIONARIO.MATRICULA = FUNCIONARIO_PROJETO.FUNCIONARIO)
	JOIN PROJETO ON (FUNCIONARIO_PROJETO.PROJETO = PROJETO.CODIGO)

----RIGHT JOIN---------

INSERT INTO CARGO VALUES (10,'ANALISTA DE DADOS','PLENO')

---QUAL CARGO NÃO POSSUI NENHUM FUNCIONÁRIO OCUPANDO?--------
SELECT FUNCIONARIO.NOME,CARGO.NOME, CARGO.NIVEL FROM FUNCIONARIO RIGHT JOIN CARGO ON (FUNCIONARIO.CARGO = CARGO.CODIGO)

---CONTINUAÇÃO----------------------
SELECT CARGO.NOME, CARGO.NIVEL 
FROM FUNCIONARIO RIGHT JOIN CARGO ON (FUNCIONARIO.CARGO = CARGO.CODIGO)
WHERE FUNCIONARIO.NOME IS NULL

-------LEFT JOIN---------

INSERT INTO FUNCIONARIO VALUES (20,'RICARDO',NULL,NULL,NULL,NULL,10)

---------QUAL FUNCIONARIO NÃO ESTA RELACIONADO COM NENHUM PROJETO?---------
SELECT FUNCIONARIO.NOME 
FROM FUNCIONARIO LEFT JOIN FUNCIONARIO_PROJETO ON (FUNCIONARIO.MATRICULA = FUNCIONARIO_PROJETO.FUNCIONARIO)
WHERE FUNCIONARIO_PROJETO.FUNCIONARIO IS NULL

------GROUP BY-----------

-----QUAL A QUANTIDADE DE FUNCIONARIOS EM CADA NOME DE CARGO?------
SELECT CARGO.NOME, COUNT(*) FROM FUNCIONARIO JOIN CARGO ON (FUNCIONARIO.CARGO = CARGO.CODIGO)
GROUP BY CARGO.NOME

-----QUAL A QUANTIDADE DE FUNCIONARIOS EM CADA NOME DE CARGO E NIVEL?------
SELECT CARGO.NOME, CARGO.NIVEL, COUNT(*) FROM FUNCIONARIO JOIN CARGO ON (FUNCIONARIO.CARGO = CARGO.CODIGO)
GROUP BY CARGO.NOME,CARGO.NIVEL

-----ORDEM DESCRESCENTE-------------------------
SELECT CARGO.NOME, CARGO.NIVEL, COUNT(*) FROM FUNCIONARIO JOIN CARGO ON (FUNCIONARIO.CARGO = CARGO.CODIGO)
GROUP BY CARGO.NOME,CARGO.NIVEL ORDER BY (COUNT(*)) DESC

----------HAVING--------------------------------
SELECT CARGO.NOME, CARGO.NIVEL, COUNT(*) FROM FUNCIONARIO JOIN CARGO ON (FUNCIONARIO.CARGO = CARGO.CODIGO)
GROUP BY CARGO.NOME,CARGO.NIVEL HAVING (COUNT(*) > 1) ORDER BY (COUNT(*)) DESC

--------DELETE CASCADE--------
SELECT * FROM FUNCIONARIO WHERE CARGO = 10

DELETE FROM CARGO WHERE CODIGO = 10

SELECT * FROM FUNCIONARIO WHERE CARGO = 10

-------ALTER TABLE - ADD SALARIO -----

------ADICIONA COLUNA SALARIO----------------
ALTER TABLE CARGO ADD SALARIO INTEGER CHECK (SALARIO > 0)

-------UPDATE ALTERANDO SALARIO ------

UPDATE CARGO SET SALARIO = 12 WHERE SALARIO IS NULL AND NIVEL = 'SÊNIOR'

-------DROP TABLE---------------------

DROP TABLE FUNCIONARIO_PROJETO

-------TRIGGER----------

ALTER TABLE FUNCIONARIO ADD NUM_PROJETOS INTEGER;

UPDATE FUNCIONARIO SET NUM_PROJETOS = 0 WHERE NUM_PROJETOS IS NULL

CREATE TABLE FUNCIONARIO_PROJETO(
	FUNCIONARIO INTEGER,
	PROJETO INTEGER,
	TIPO CHAR(11),
	CONSTRAINT PK_FUNC_PROJ PRIMARY KEY (FUNCIONARIO,PROJETO),
	CONSTRAINT FK_FUNC FOREIGN KEY (FUNCIONARIO) REFERENCES FUNCIONARIO(MATRICULA) ON DELETE CASCADE,
	CONSTRAINT FK_PROJ FOREIGN KEY (PROJETO) REFERENCES PROJETO(CODIGO) ON DELETE CASCADE
);

---------------------------------------------------------

CREATE OR REPLACE FUNCTION atualiza_projeto()
RETURNS trigger
AS
$$
begin
UPDATE FUNCIONARIO
SET NUM_PROJETOS = NUM_PROJETOS + 1
where MATRICULA = NEW.FUNCIONARIO;
return null;
end
$$  LANGUAGE plpgsql

CREATE TRIGGER NUM_PROJETOS AFTER INSERT ON FUNCIONARIO_PROJETO
FOR EACH ROW
EXECUTE PROCEDURE atualiza_projeto();

INSERT INTO FUNCIONARIO_PROJETO VALUES (1,1,'PRINCIPAL');

-------CRIAR ÍNDICE------------------

CREATE INDEX FUNC_NOME ON FUNCIONARIO (NOME);

-------EXPLAIN-----------

EXPLAIN SELECT * FROM FUNCIONARIO WHERE NOME = 'GUILHERME'